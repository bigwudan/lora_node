###############################################################################
#
# IAR ANSI C/C++ Compiler V7.30.3.8024/W32 for ARM        13/Mar/2021  17:42:42
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        E:\G\STM32F0_Andrew\STM32F0xx_StdPeriph_Lib_V1.5.0 LLCC68\LLCC68 Easy
#        Demo v1.0\system_stm32f0xx.c
#    Command line =  
#        "E:\G\STM32F0_Andrew\STM32F0xx_StdPeriph_Lib_V1.5.0 LLCC68\LLCC68 Easy
#        Demo v1.0\system_stm32f0xx.c" -D STM32F030 -D USE_STDPERIPH_DRIVER
#        -lcN "E:\G\STM32F0_Andrew\STM32F0xx_StdPeriph_Lib_V1.5.0 LLCC68\LLCC68
#        Easy Demo v1.0\EWARM\STM32F030\List\" -o
#        "E:\G\STM32F0_Andrew\STM32F0xx_StdPeriph_Lib_V1.5.0 LLCC68\LLCC68 Easy
#        Demo v1.0\EWARM\STM32F030\Obj\" --no_cse --no_unroll --no_inline
#        --no_code_motion --no_tbaa --no_clustering --no_scheduling --debug
#        --endian=little --cpu=Cortex-M0 -e --fpu=None --dlib_config
#        "C:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Full.h" -I
#        "E:\G\STM32F0_Andrew\STM32F0xx_StdPeriph_Lib_V1.5.0 LLCC68\LLCC68 Easy
#        Demo v1.0\EWARM\..\Libraries\STM32F0xx_StdPeriph_Driver\inc\" -I
#        "E:\G\STM32F0_Andrew\STM32F0xx_StdPeriph_Lib_V1.5.0 LLCC68\LLCC68 Easy
#        Demo v1.0\EWARM\..\" -I
#        "E:\G\STM32F0_Andrew\STM32F0xx_StdPeriph_Lib_V1.5.0 LLCC68\LLCC68 Easy
#        Demo v1.0\EWARM\..\Radio\inc\" -Ol -I "C:\Program Files (x86)\IAR
#        Systems\Embedded Workbench 7.0\arm\CMSIS\Include\"
#    List file    =  
#        E:\G\STM32F0_Andrew\STM32F0xx_StdPeriph_Lib_V1.5.0 LLCC68\LLCC68 Easy
#        Demo v1.0\EWARM\STM32F030\List\system_stm32f0xx.lst
#    Object file  =  
#        E:\G\STM32F0_Andrew\STM32F0xx_StdPeriph_Lib_V1.5.0 LLCC68\LLCC68 Easy
#        Demo v1.0\EWARM\STM32F030\Obj\system_stm32f0xx.o
#
###############################################################################

E:\G\STM32F0_Andrew\STM32F0xx_StdPeriph_Lib_V1.5.0  LLCC68\LLCC68 Easy Demo v1.0\system_stm32f0xx.c
      1          /**
      2            ******************************************************************************
      3            * @file    system_stm32f0xx.c
      4            * @author  MCD Application Team
      5            * @version V1.5.0
      6            * @date    05-December-2014
      7            * @brief   CMSIS Cortex-M0 Device Peripheral Access Layer System Source File.
      8            *          This file contains the system clock configuration for STM32F0xx devices,
      9            *          and is generated by the clock configuration tool  
     10            *          STM32F0xx_Clock_Configuration_V1.0.1.xls
     11            *
     12            * 1.  This file provides two functions and one global variable to be called from 
     13            *     user application:
     14            *      - SystemInit(): Setups the system clock (System clock source, PLL Multiplier
     15            *                      and Divider factors, AHB/APBx prescalers and Flash settings),
     16            *                      depending on the configuration made in the clock xls tool.
     17            *                      This function is called at startup just after reset and 
     18            *                      before branch to main program. This call is made inside
     19            *                      the "startup_stm32f0xx.s" file.
     20            *
     21            *      - SystemCoreClock variable: Contains the core clock (HCLK), it can be used
     22            *                                  by the user application to setup the SysTick 
     23            *                                  timer or configure other parameters.
     24            *
     25            *      - SystemCoreClockUpdate(): Updates the variable SystemCoreClock and must
     26            *                                 be called whenever the core clock is changed
     27            *                                 during program execution.
     28            *
     29            * 2. After each device reset the HSI (8 MHz Range) is used as system clock source.
     30            *    Then SystemInit() function is called, in "startup_stm32f0xx.s" file, to
     31            *    configure the system clock before to branch to main program.
     32            *
     33            * 3. If the system clock source selected by user fails to startup, the SystemInit()
     34            *    function will do nothing and HSI still used as system clock source. User can 
     35            *    add some code to deal with this issue inside the SetSysClock() function.
     36            *
     37            * 4. The default value of HSE crystal is set to 8MHz, refer to "HSE_VALUE" define
     38            *    in "stm32f0xx.h" file. When HSE is used as system clock source, directly or
     39            *    through PLL, and you are using different crystal you have to adapt the HSE
     40            *    value to your own configuration.
     41            *
     42            * 5. This file configures the system clock as follows:
     43            *=============================================================================
     44            *=============================================================================
     45            *        System Clock source                    | PLL(HSE)
     46            *-----------------------------------------------------------------------------
     47            *        SYSCLK(Hz)                             | 48000000
     48            *-----------------------------------------------------------------------------
     49            *        HCLK(Hz)                               | 48000000
     50            *-----------------------------------------------------------------------------
     51            *        AHB Prescaler                          | 1
     52            *-----------------------------------------------------------------------------
     53            *        APB Prescaler                          | 1
     54            *-----------------------------------------------------------------------------
     55            *        HSE Frequency(Hz)                      | 8000000
     56            *----------------------------------------------------------------------------
     57            *        PLLMUL                                 | 6
     58            *-----------------------------------------------------------------------------
     59            *        PREDIV                                 | 1
     60            *-----------------------------------------------------------------------------
     61            *        Flash Latency(WS)                      | 1
     62            *-----------------------------------------------------------------------------
     63            *        Prefetch Buffer                        | ON
     64            *-----------------------------------------------------------------------------
     65            ******************************************************************************
     66            * @attention
     67            *
     68            * <h2><center>&copy; COPYRIGHT 2014 STMicroelectronics</center></h2>
     69            *
     70            * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
     71            * You may not use this file except in compliance with the License.
     72            * You may obtain a copy of the License at:
     73            *
     74            *        http://www.st.com/software_license_agreement_liberty_v2
     75            *
     76            * Unless required by applicable law or agreed to in writing, software 
     77            * distributed under the License is distributed on an "AS IS" BASIS, 
     78            * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     79            * See the License for the specific language governing permissions and
     80            * limitations under the License.
     81            *
     82            ******************************************************************************
     83            */
     84          
     85          /** @addtogroup CMSIS
     86            * @{
     87            */
     88          
     89          /** @addtogroup stm32f0xx_system
     90            * @{
     91            */  
     92            
     93          /** @addtogroup STM32F0xx_System_Private_Includes
     94            * @{
     95            */
     96          
     97          #include "stm32f0xx.h"
     98          
     99          /**
    100            * @}
    101            */
    102          
    103          /** @addtogroup STM32F0xx_System_Private_TypesDefinitions
    104            * @{
    105            */
    106          
    107          /**
    108            * @}
    109            */
    110          
    111          /** @addtogroup STM32F0xx_System_Private_Defines
    112            * @{
    113            */
    114          /**
    115            * @}
    116            */
    117          
    118          /** @addtogroup STM32F0xx_System_Private_Macros
    119            * @{
    120            */
    121          
    122          /**
    123            * @}
    124            */
    125          
    126          /** @addtogroup STM32F0xx_System_Private_Variables
    127            * @{
    128            */
    129          uint32_t SystemCoreClock    = 48000000;
    130          __I uint8_t AHBPrescTable[16] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
    131          
    132          /**
    133            * @}
    134            */
    135          
    136          /** @addtogroup STM32F0xx_System_Private_FunctionPrototypes
    137            * @{
    138            */
    139          
    140          static void SetSysClock(void);
    141          
    142          /**
    143            * @}
    144            */
    145          
    146          /** @addtogroup STM32F0xx_System_Private_Functions
    147            * @{
    148            */
    149          
    150          /**
    151            * @brief  Setup the microcontroller system.
    152            *         Initialize the Embedded Flash Interface, the PLL and update the 
    153            *         SystemCoreClock variable.
    154            * @param  None
    155            * @retval None
    156            */
    157          void SystemInit (void)
    158          {    
    159            /* Set HSION bit */
    160            RCC->CR |= (uint32_t)0x00000001;
    161          
    162          #if defined(STM32F051)   
    163            /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
    164            RCC->CFGR &= (uint32_t)0xF8FFB80C;
    165          #else
    166            /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE, MCOSEL[2:0], MCOPRE[2:0] and PLLNODIV bits */
    167            RCC->CFGR &= (uint32_t)0x08FFB80C;
    168          #endif /* STM32F051 */
    169            
    170            /* Reset HSEON, CSSON and PLLON bits */
    171            RCC->CR &= (uint32_t)0xFEF6FFFF;
    172          
    173            /* Reset HSEBYP bit */
    174            RCC->CR &= (uint32_t)0xFFFBFFFF;
    175          
    176            /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
    177            RCC->CFGR &= (uint32_t)0xFFC0FFFF;
    178          
    179            /* Reset PREDIV1[3:0] bits */
    180            RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
    181          
    182            /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
    183            RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
    184          
    185            /* Reset HSI14 bit */
    186            RCC->CR2 &= (uint32_t)0xFFFFFFFE;
    187          
    188            /* Disable all interrupts */
    189            RCC->CIR = 0x00000000;
    190          
    191            /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
    192            SetSysClock();
    193          }
    194          
    195          /**
    196            * @brief  Update SystemCoreClock according to Clock Register Values
    197            *         The SystemCoreClock variable contains the core clock (HCLK), it can
    198            *         be used by the user application to setup the SysTick timer or configure
    199            *         other parameters.
    200            *
    201            * @note   Each time the core clock (HCLK) changes, this function must be called
    202            *         to update SystemCoreClock variable value. Otherwise, any configuration
    203            *         based on this variable will be incorrect.         
    204            *
    205            * @note   - The system frequency computed by this function is not the real 
    206            *           frequency in the chip. It is calculated based on the predefined 
    207            *           constant and the selected clock source:
    208            *
    209            *           - If SYSCLK source is HSI, SystemCoreClock will contain the HSI_VALUE(*)
    210            *                                              
    211            *           - If SYSCLK source is HSE, SystemCoreClock will contain the HSE_VALUE(**)
    212            *                          
    213            *           - If SYSCLK source is PLL, SystemCoreClock will contain the HSE_VALUE(**)
    214            *             or HSI_VALUE(*) multiplied/divided by the PLL factors.
    215            *
    216            *         (*) HSI_VALUE is a constant defined in stm32f0xx.h file (default value
    217            *             8 MHz) but the real value may vary depending on the variations
    218            *             in voltage and temperature.
    219            *
    220            *         (**) HSE_VALUE is a constant defined in stm32f0xx.h file (default value
    221            *              8 MHz), user has to ensure that HSE_VALUE is same as the real
    222            *              frequency of the crystal used. Otherwise, this function may
    223            *              have wrong result.
    224            *
    225            *         - The result of this function could be not correct when using fractional
    226            *           value for HSE crystal.
    227            * @param  None
    228            * @retval None
    229            */
    230          void SystemCoreClockUpdate (void)
    231          {
    232            uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0;
    233          
    234            /* Get SYSCLK source -------------------------------------------------------*/
    235            tmp = RCC->CFGR & RCC_CFGR_SWS;
    236            
    237            switch (tmp)
    238            {
    239              case 0x00:  /* HSI used as system clock */
    240                SystemCoreClock = HSI_VALUE;
    241                break;
    242              case 0x04:  /* HSE used as system clock */
    243                SystemCoreClock = HSE_VALUE;
    244                break;
    245              case 0x08:  /* PLL used as system clock */
    246                /* Get PLL clock source and multiplication factor ----------------------*/
    247                pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
    248                pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
    249                pllmull = ( pllmull >> 18) + 2;
    250                
    251                if (pllsource == 0x00)
    252                {
    253                  /* HSI oscillator clock divided by 2 selected as PLL clock entry */
    254                  SystemCoreClock = (HSI_VALUE >> 1) * pllmull;
    255                }
    256                else
    257                {
    258                  prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
    259                  /* HSE oscillator clock selected as PREDIV1 clock entry */
    260                  SystemCoreClock = (HSE_VALUE / prediv1factor) * pllmull; 
    261                }      
    262                break;
    263              default: /* HSI used as system clock */
    264                SystemCoreClock = HSI_VALUE;
    265                break;
    266            }
    267            /* Compute HCLK clock frequency ----------------*/
    268            /* Get HCLK prescaler */
    269            tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
    270            /* HCLK clock frequency */
    271            SystemCoreClock >>= tmp;  
    272          }
    273          
    274          /**
    275            * @brief  Configures the System clock frequency, AHB/APBx prescalers and Flash
    276            *         settings.
    277            * @note   This function should be called only once the RCC clock configuration
    278            *         is reset to the default reset state (done in SystemInit() function).
    279            * @param  None
    280            * @retval None
    281            */
    282          static void SetSysClock(void)
    283          {
    284             __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
    285          
    286          /******************************************************************************/
    287          /*            PLL (clocked by HSE) used as System clock source                */
    288          /******************************************************************************/
    289            
    290            /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
    291            /* Enable HSE */    
    292            RCC->CR |= ((uint32_t)RCC_CR_HSEON);
    293            
    294            /* Wait till HSE is ready and if Time out is reached exit */
    295            do
    296            {
    297              HSEStatus = RCC->CR & RCC_CR_HSERDY;
    298              StartUpCounter++;  
    299            } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
    300          
    301            if ((RCC->CR & RCC_CR_HSERDY) != RESET)
    302            {
    303              HSEStatus = (uint32_t)0x01;
    304            }
    305            else
    306            {
    307              HSEStatus = (uint32_t)0x00;
    308            }  
    309          
    310            if (HSEStatus == (uint32_t)0x01)
    311            {
    312              /* Enable Prefetch Buffer and set Flash Latency */
    313              FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
    314           
    315              /* HCLK = SYSCLK */
    316              RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
    317                
    318              /* PCLK = HCLK */
    319              RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
    320          
    321              /* PLL configuration */
    322              RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
    323              RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL4);
    324                      
    325              /* Enable PLL */
    326              RCC->CR |= RCC_CR_PLLON;
    327          
    328              /* Wait till PLL is ready */
    329              while((RCC->CR & RCC_CR_PLLRDY) == 0)
    330              {
    331              }
    332          
    333              /* Select PLL as system clock source */
    334              RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
    335              RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
    336          
    337              /* Wait till PLL is used as system clock source */
    338              while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
    339              {
    340              }
    341            }
    342            else
    343            { /* If HSE fails to start-up, the application will have wrong clock 
    344                   configuration. User can add here some code to deal with this error */
    345            }  
    346          }
    347          
    348          /**
    349            * @}
    350            */
    351          
    352          /**
    353            * @}
    354            */
    355          
    356          /**
    357            * @}
    358            */
    359          
    360          /************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      12   SetSysClock
       8   SystemCoreClockUpdate
         8 __aeabi_uidiv
       8   SystemInit
         8   -> SetSysClock


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_10
       4  ??DataTable2_11
       4  ??DataTable2_12
       4  ??DataTable2_13
       4  ??DataTable2_14
       4  ??DataTable2_15
       4  ??DataTable2_16
       4  ??DataTable2_17
       4  ??DataTable2_2
       4  ??DataTable2_3
       4  ??DataTable2_4
       4  ??DataTable2_5
       4  ??DataTable2_6
       4  ??DataTable2_7
       4  ??DataTable2_8
       4  ??DataTable2_9
      16  AHBPrescTable
     190  SetSysClock
       4  SystemCoreClock
     142  SystemCoreClockUpdate
     110  SystemInit

 
  20 bytes in section .data
 514 bytes in section .text
 
 514 bytes of CODE memory
  20 bytes of DATA memory

Errors: none
Warnings: none
