<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\LLCC68 Demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\LLCC68 Demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Dec 08 22:46:59 2022
<BR><P>
<H3>Maximum Stack Usage =        184 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
RadioTimeOnAir &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[d]">DMA1_Channel1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">DMA1_Channel1_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3f]">RadioSetPublicNetwork</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">RadioSetModem</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[10]">ADC1_IRQHandler</a> from stm32f0xx_it.o(i.ADC1_IRQHandler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[d]">DMA1_Channel1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[e]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[f]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[a]">EXTI0_1_IRQHandler</a> from stm32f0xx_it.o(i.EXTI0_1_IRQHandler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[b]">EXTI2_3_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[c]">EXTI4_15_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[8]">FLASH_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f0xx_it.o(i.HardFault_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[18]">I2C1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[19]">I2C2_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f0xx_it.o(i.NMI_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from stm32f0xx_it.o(i.PendSV_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[9]">RCC_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[7]">RTC_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[31]">RadioCheckRfFrequency</a> from radio.o(i.RadioCheckRfFrequency) referenced from radio.o(.constdata)
 <LI><a href="#[2a]">RadioGetStatus</a> from radio.o(i.RadioGetStatus) referenced from radio.o(.constdata)
 <LI><a href="#[40]">RadioGetWakeupTime</a> from radio.o(i.RadioGetWakeupTime) referenced from radio.o(.constdata)
 <LI><a href="#[29]">RadioInit</a> from radio.o(i.RadioInit) referenced from radio.o(.constdata)
 <LI><a href="#[41]">RadioIrqProcess</a> from radio.o(i.RadioIrqProcess) referenced from radio.o(.constdata)
 <LI><a href="#[2d]">RadioIsChannelFree</a> from radio.o(i.RadioIsChannelFree) referenced from radio.o(.constdata)
 <LI><a href="#[21]">RadioOnDioIrq</a> from radio.o(i.RadioOnDioIrq) referenced from radio.o(i.RadioInit)
 <LI><a href="#[2e]">RadioRandom</a> from radio.o(i.RadioRandom) referenced from radio.o(.constdata)
 <LI><a href="#[3b]">RadioRead</a> from radio.o(i.RadioRead) referenced from radio.o(.constdata)
 <LI><a href="#[3d]">RadioReadBuffer</a> from radio.o(i.RadioReadBuffer) referenced from radio.o(.constdata)
 <LI><a href="#[39]">RadioRssi</a> from radio.o(i.RadioRssi) referenced from radio.o(.constdata)
 <LI><a href="#[36]">RadioRx</a> from radio.o(i.RadioRx) referenced from radio.o(.constdata)
 <LI><a href="#[42]">RadioRxBoosted</a> from radio.o(i.RadioRxBoosted) referenced from radio.o(.constdata)
 <LI><a href="#[33]">RadioSend</a> from radio.o(i.RadioSend) referenced from radio.o(.constdata)
 <LI><a href="#[2c]">RadioSetChannel</a> from radio.o(i.RadioSetChannel) referenced from radio.o(.constdata)
 <LI><a href="#[3e]">RadioSetMaxPayloadLength</a> from radio.o(i.RadioSetMaxPayloadLength) referenced from radio.o(.constdata)
 <LI><a href="#[2b]">RadioSetModem</a> from radio.o(i.RadioSetModem) referenced from radio.o(.constdata)
 <LI><a href="#[3f]">RadioSetPublicNetwork</a> from radio.o(i.RadioSetPublicNetwork) referenced from radio.o(.constdata)
 <LI><a href="#[2f]">RadioSetRxConfig</a> from radio.o(i.RadioSetRxConfig) referenced from radio.o(.constdata)
 <LI><a href="#[43]">RadioSetRxDutyCycle</a> from radio.o(i.RadioSetRxDutyCycle) referenced from radio.o(.constdata)
 <LI><a href="#[30]">RadioSetTxConfig</a> from radio.o(i.RadioSetTxConfig) referenced from radio.o(.constdata)
 <LI><a href="#[38]">RadioSetTxContinuousWave</a> from radio.o(i.RadioSetTxContinuousWave) referenced from radio.o(.constdata)
 <LI><a href="#[34]">RadioSleep</a> from radio.o(i.RadioSleep) referenced from radio.o(.constdata)
 <LI><a href="#[35]">RadioStandby</a> from radio.o(i.RadioStandby) referenced from radio.o(.constdata)
 <LI><a href="#[37]">RadioStartCad</a> from radio.o(i.RadioStartCad) referenced from radio.o(.constdata)
 <LI><a href="#[32]">RadioTimeOnAir</a> from radio.o(i.RadioTimeOnAir) referenced from radio.o(.constdata)
 <LI><a href="#[3a]">RadioWrite</a> from radio.o(i.RadioWrite) referenced from radio.o(.constdata)
 <LI><a href="#[3c]">RadioWriteBuffer</a> from radio.o(i.RadioWriteBuffer) referenced from radio.o(.constdata)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1a]">SPI1_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1b]">SPI2_IRQHandler</a> from stm32f0xx_it.o(i.SPI2_IRQHandler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from stm32f0xx_it.o(i.SVC_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from stm32f0xx_it.o(i.SysTick_Handler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1f]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f030.o(.text)
 <LI><a href="#[14]">TIM14_IRQHandler</a> from stm32f0xx_it.o(i.TIM14_IRQHandler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[15]">TIM15_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[16]">TIM16_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[17]">TIM17_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[11]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[12]">TIM1_CC_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[13]">TIM3_IRQHandler</a> from stm32f0xx_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1c]">USART1_IRQHandler</a> from stm32f0xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[1d]">USART2_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32f030.o(.text) referenced from startup_stm32f030.o(RESET)
 <LI><a href="#[28]">_OnCadDone</a> from lora_node.o(i._OnCadDone) referenced from lora_node.o(i.lora_node_init)
 <LI><a href="#[24]">_OnRxDone</a> from lora_node.o(i._OnRxDone) referenced from lora_node.o(i.lora_node_init)
 <LI><a href="#[27]">_OnRxError</a> from lora_node.o(i._OnRxError) referenced from lora_node.o(i.lora_node_init)
 <LI><a href="#[26]">_OnRxTimeout</a> from lora_node.o(i._OnRxTimeout) referenced from lora_node.o(i.lora_node_init)
 <LI><a href="#[23]">_OnTxDone</a> from lora_node.o(i._OnTxDone) referenced from lora_node.o(i.lora_node_init)
 <LI><a href="#[25]">_OnTxTimeout</a> from lora_node.o(i._OnTxTimeout) referenced from lora_node.o(i.lora_node_init)
 <LI><a href="#[20]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f030.o(.text)
 <LI><a href="#[22]">fputc</a> from uart.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[1e]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[20]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(.text)
</UL>
<P><STRONG><a name="[103]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[44]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[59]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[104]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[105]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[106]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[107]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[108]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[109]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_set_min
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tick_Configration
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_idie_fsm_func
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnRxDone
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_common_snd_join
</UL>

<P><STRONG><a name="[10a]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[10b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[10d]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[46]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_common_snd_beg
</UL>

<P><STRONG><a name="[b7]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPacketStatus
</UL>

<P><STRONG><a name="[10e]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[49]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>

<P><STRONG><a name="[4e]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfFrequency
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetModulationParams
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[a2]"></a>__ARM_scalbn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetModulationParams
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[10f]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfFrequency
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetModulationParams
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfFrequency
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetModulationParams
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[aa]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[110]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[111]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[4b]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[112]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[113]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[4d]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[4c]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[58]"></a>_drnd</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rint
</UL>

<P><STRONG><a name="[45]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[114]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[10]"></a>ADC1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.ADC1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.EXTI0_1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[fd]"></a>FLASH_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_flash.o(i.FLASH_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operate_flash_write
</UL>

<P><STRONG><a name="[5c]"></a>FLASH_GetStatus</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f0xx_flash.o(i.FLASH_GetStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[fe]"></a>FLASH_Lock</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_flash.o(i.FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operate_flash_write
</UL>

<P><STRONG><a name="[5a]"></a>FLASH_ProgramHalfWord</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, stm32f0xx_flash.o(i.FLASH_ProgramHalfWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operate_flash_write
</UL>

<P><STRONG><a name="[fc]"></a>FLASH_Unlock</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operate_flash_write
</UL>

<P><STRONG><a name="[5b]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, stm32f0xx_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
</UL>

<P><STRONG><a name="[5e]"></a>GPIO_Init</STRONG> (Thumb, 112 bytes, Stack size 20 bytes, stm32f0xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_int
</UL>

<P><STRONG><a name="[60]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f0xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_int
</UL>

<P><STRONG><a name="[8b]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWaitOnBusy
</UL>

<P><STRONG><a name="[5f]"></a>GPIO_WriteBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegisters
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteBuffer
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadRegisters
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadBuffer
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_int
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWakeup
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReset
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadCommand
</UL>

<P><STRONG><a name="[5d]"></a>GPIO_int</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, gpio.o(i.GPIO_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = GPIO_int &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_int
</UL>

<P><STRONG><a name="[90]"></a>HAL_Delay_nMS</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, delay.o(i.HAL_Delay_nMS))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSleep
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRandom
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReset
</UL>

<P><STRONG><a name="[61]"></a>HW_int</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(i.HW_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = HW_int &rArr; UartInit &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_GetFlagStatus
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Int
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_int
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Tick_Configration
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClock_48
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>NVIC_Init</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, stm32f0xx_misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_set_min
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[71]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_set_min
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set
</UL>

<P><STRONG><a name="[75]"></a>PWR_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_pwr.o(i.PWR_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_set_min
</UL>

<P><STRONG><a name="[f2]"></a>PWR_EnterSTANDBYMode</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_pwr.o(i.PWR_EnterSTANDBYMode))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sleep_fsm_func
</UL>

<P><STRONG><a name="[67]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_pwr.o(i.PWR_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_int
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[6b]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[6c]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_Configuration
</UL>

<P><STRONG><a name="[65]"></a>RCC_Configuration</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, main.o(i.RCC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_Configuration
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_int
</UL>

<P><STRONG><a name="[c9]"></a>RCC_DeInit</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClock_48
</UL>

<P><STRONG><a name="[6d]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 376 bytes, Stack size 24 bytes, stm32f0xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[cc]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClock_48
</UL>

<P><STRONG><a name="[ff]"></a>RCC_LSICmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_LSICmd))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set
</UL>

<P><STRONG><a name="[ca]"></a>RCC_PLLCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_PLLCmd))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClock_48
</UL>

<P><STRONG><a name="[cb]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f0xx_rcc.o(i.RCC_PLLConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RCC_PLLConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClock_48
</UL>

<P><STRONG><a name="[101]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_RTCCLKCmd))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set
</UL>

<P><STRONG><a name="[100]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_RTCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set
</UL>

<P><STRONG><a name="[cd]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_SYSCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClock_48
</UL>

<P><STRONG><a name="[77]"></a>RTC_AlarmCmd</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, stm32f0xx_rtc.o(i.RTC_AlarmCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_AlarmCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_set_min
</UL>

<P><STRONG><a name="[78]"></a>RTC_AlarmStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_rtc.o(i.RTC_AlarmStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_set_min
</UL>

<P><STRONG><a name="[6f]"></a>RTC_Alarm_set_min</STRONG> (Thumb, 214 bytes, Stack size 48 bytes, rtc.o(i.RTC_Alarm_set_min))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RTC_Alarm_set_min &rArr; rtc_get_sec &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_ClearFlag
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteProtectionCmd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearFlag
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmStructInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_AlarmCmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_sec
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sleep_fsm_func
</UL>

<P><STRONG><a name="[74]"></a>RTC_ClearFlag</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_rtc.o(i.RTC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_set_min
</UL>

<P><STRONG><a name="[73]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_rtc.o(i.RTC_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_set_min
</UL>

<P><STRONG><a name="[102]"></a>RTC_DateStructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_rtc.o(i.RTC_DateStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set
</UL>

<P><STRONG><a name="[7e]"></a>RTC_EnterInitMode</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32f0xx_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[7f]"></a>RTC_ExitInitMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_rtc.o(i.RTC_ExitInitMode))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[7b]"></a>RTC_GetTime</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f0xx_rtc.o(i.RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_sec
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_min
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_time
</UL>

<P><STRONG><a name="[76]"></a>RTC_ITConfig</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f0xx_rtc.o(i.RTC_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_set_min
</UL>

<P><STRONG><a name="[7d]"></a>RTC_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, stm32f0xx_rtc.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set
</UL>

<P><STRONG><a name="[7a]"></a>RTC_SetAlarm</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, stm32f0xx_rtc.o(i.RTC_SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_set_min
</UL>

<P><STRONG><a name="[81]"></a>RTC_SetDate</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, stm32f0xx_rtc.o(i.RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = RTC_SetDate &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set
</UL>

<P><STRONG><a name="[83]"></a>RTC_SetTime</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, stm32f0xx_rtc.o(i.RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitInitMode
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_time
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set
</UL>

<P><STRONG><a name="[82]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, stm32f0xx_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set
</UL>

<P><STRONG><a name="[72]"></a>RTC_WriteProtectionCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_rtc.o(i.RTC_WriteProtectionCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_set_min
</UL>

<P><STRONG><a name="[31]"></a>RadioCheckRfFrequency</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(i.RadioCheckRfFrequency))
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[2a]"></a>RadioGetStatus</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, radio.o(i.RadioGetStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RadioGetStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetOperatingMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[40]"></a>RadioGetWakeupTime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, radio.o(i.RadioGetWakeupTime))
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[29]"></a>RadioInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, radio.o(i.RadioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RadioInit &rArr; SX126xSetTxParams &rArr; SX126xWriteRegister &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetTxParams
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetStandby
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRegulatorMode
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetDioIrqParams
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetBufferBaseAddress
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>RadioIrqProcess</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, radio.o(i.RadioIrqProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = RadioIrqProcess &rArr; SX126xGetPayload &rArr; SX126xGetRxBufferStatus &rArr; SX126xReadRegister &rArr; SX126xReadRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPayload
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPacketStatus
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetOperatingMode
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetIrqStatus
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xClearIrqStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[2d]"></a>RadioIsChannelFree</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, radio.o(i.RadioIsChannelFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RadioIsChannelFree &rArr; RadioSetModem &rArr; RadioSetPublicNetwork &rArr;  RadioSetModem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSleep
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetChannel
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay_nMS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[21]"></a>RadioOnDioIrq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, radio.o(i.RadioOnDioIrq))
<BR>[Address Reference Count : 1]<UL><LI> radio.o(i.RadioInit)
</UL>
<P><STRONG><a name="[2e]"></a>RadioRandom</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, radio.o(i.RadioRandom))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RadioRandom &rArr; RadioSetModem &rArr; RadioSetPublicNetwork &rArr;  RadioSetModem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRx
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetRssiInst
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSleep
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay_nMS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[3b]"></a>RadioRead</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, radio.o(i.RadioRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RadioRead &rArr; SX126xReadRegister &rArr; SX126xReadRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[3d]"></a>RadioReadBuffer</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, radio.o(i.RadioReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RadioReadBuffer &rArr; SX126xReadRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadRegisters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[39]"></a>RadioRssi</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, radio.o(i.RadioRssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RadioRssi &rArr; SX126xGetRssiInst &rArr; SX126xReadCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetRssiInst
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[36]"></a>RadioRx</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, radio.o(i.RadioRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RadioRx &rArr; SX126xSetDioIrqParams &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRx
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetDioIrqParams
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[42]"></a>RadioRxBoosted</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, radio.o(i.RadioRxBoosted))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RadioRxBoosted &rArr; SX126xSetRxBoosted &rArr; SX126xWriteRegister &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRxBoosted
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetDioIrqParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[33]"></a>RadioSend</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, radio.o(i.RadioSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = RadioSend &rArr; SX126xSetPacketParams &rArr; SX126xSetPacketType &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketParams
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetDioIrqParams
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSendPayload
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPacketType
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[2c]"></a>RadioSetChannel</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, radio.o(i.RadioSetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RadioSetChannel &rArr; SX126xSetRfFrequency &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfFrequency
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>RadioSetMaxPayloadLength</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, radio.o(i.RadioSetMaxPayloadLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RadioSetMaxPayloadLength &rArr; SX126xSetPacketParams &rArr; SX126xSetPacketType &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketParams
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[2b]"></a>RadioSetModem</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, radio.o(i.RadioSetModem))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RadioSetModem &rArr; RadioSetPublicNetwork &rArr;  RadioSetModem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketType
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetPublicNetwork
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetPublicNetwork
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRandom
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>RadioSetPublicNetwork</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, radio.o(i.RadioSetPublicNetwork))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = RadioSetPublicNetwork &rArr;  RadioSetModem (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegister
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[2f]"></a>RadioSetRxConfig</STRONG> (Thumb, 380 bytes, Stack size 48 bytes, radio.o(i.RadioSetRxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = RadioSetRxConfig &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetWhiteningSeed
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetSyncWord
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetStopRxTimerOnPreambleDetect
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketParams
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetModulationParams
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetLoRaSymbNumTimeout
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStandby
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGetFskBandwidthRegValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>RadioSetRxDutyCycle</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, radio.o(i.RadioSetRxDutyCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RadioSetRxDutyCycle &rArr; SX126xSetRxDutyCycle &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRxDutyCycle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[30]"></a>RadioSetTxConfig</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, radio.o(i.RadioSetTxConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = RadioSetTxConfig &rArr; SX126xSetRfTxPower &rArr; SX126xSetTxParams &rArr; SX126xWriteRegister &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetWhiteningSeed
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetSyncWord
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfTxPower
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketParams
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetModulationParams
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStandby
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGetFskBandwidthRegValue
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[38]"></a>RadioSetTxContinuousWave</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, radio.o(i.RadioSetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = RadioSetTxContinuousWave &rArr; SX126xSetRfTxPower &rArr; SX126xSetTxParams &rArr; SX126xWriteRegister &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetTxContinuousWave
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfTxPower
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfFrequency
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[34]"></a>RadioSleep</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, radio.o(i.RadioSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RadioSleep &rArr; SX126xSetSleep &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetSleep
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay_nMS
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRandom
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIsChannelFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[35]"></a>RadioStandby</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, radio.o(i.RadioStandby))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RadioStandby &rArr; SX126xSetStandby &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetStandby
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[37]"></a>RadioStartCad</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, radio.o(i.RadioStartCad))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RadioStartCad &rArr; SX126xSetCad &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetCad
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[32]"></a>RadioTimeOnAir</STRONG> (Thumb, 378 bytes, Stack size 48 bytes, radio.o(i.RadioTimeOnAir))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = RadioTimeOnAir &rArr; floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rint
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;floor
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ceil
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[3a]"></a>RadioWrite</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, radio.o(i.RadioWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = RadioWrite &rArr; SX126xWriteRegister &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegister
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[3c]"></a>RadioWriteBuffer</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, radio.o(i.RadioWriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RadioWriteBuffer &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegisters
</UL>
<BR>[Address Reference Count : 1]<UL><LI> radio.o(.constdata)
</UL>
<P><STRONG><a name="[66]"></a>SPI1_Int</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, spi.o(i.SPI1_Int))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SPI1_Int &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_RxFIFOThresholdConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_int
</UL>

<P><STRONG><a name="[1b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.SPI2_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[af]"></a>SPI_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Int
</UL>

<P><STRONG><a name="[c6]"></a>SPI_I2S_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_spi.o(i.SPI_I2S_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
</UL>

<P><STRONG><a name="[ad]"></a>SPI_Init</STRONG> (Thumb, 74 bytes, Stack size 12 bytes, stm32f0xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Int
</UL>

<P><STRONG><a name="[c8]"></a>SPI_ReceiveData8</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_spi.o(i.SPI_ReceiveData8))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
</UL>

<P><STRONG><a name="[ae]"></a>SPI_RxFIFOThresholdConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_spi.o(i.SPI_RxFIFOThresholdConfig))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Int
</UL>

<P><STRONG><a name="[c7]"></a>SPI_SendData8</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_spi.o(i.SPI_SendData8))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[c4]"></a>SX126xAntSwOff</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx126x-board.o(i.SX126xAntSwOff))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetSleep
</UL>

<P><STRONG><a name="[b4]"></a>SX126xAntSwOn</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sx126x-board.o(i.SX126xAntSwOn))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCheckDeviceReady
</UL>

<P><STRONG><a name="[b0]"></a>SX126xCalibrateImage</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, sx126x.o(i.SX126xCalibrateImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX126xCalibrateImage &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfFrequency
</UL>

<P><STRONG><a name="[b2]"></a>SX126xCheckDeviceReady</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx126x.o(i.SX126xCheckDeviceReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetOperatingMode
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWakeup
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWaitOnBusy
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xAntSwOn
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegisters
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteBuffer
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadRegisters
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadBuffer
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadCommand
</UL>

<P><STRONG><a name="[8d]"></a>SX126xClearIrqStatus</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sx126x.o(i.SX126xClearIrqStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX126xClearIrqStatus &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>

<P><STRONG><a name="[8c]"></a>SX126xGetIrqStatus</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sx126x.o(i.SX126xGetIrqStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX126xGetIrqStatus &rArr; SX126xReadCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>

<P><STRONG><a name="[84]"></a>SX126xGetOperatingMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx126x.o(i.SX126xGetOperatingMode))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioGetStatus
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCheckDeviceReady
</UL>

<P><STRONG><a name="[c5]"></a>SX126xGetPaSelect</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sx126x-board.o(i.SX126xGetPaSelect))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetTxParams
</UL>

<P><STRONG><a name="[8f]"></a>SX126xGetPacketStatus</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, sx126x.o(i.SX126xGetPacketStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX126xGetPacketStatus &rArr; SX126xReadCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPacketType
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>

<P><STRONG><a name="[96]"></a>SX126xGetPacketType</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sx126x.o(i.SX126xGetPacketType))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetWhiteningSeed
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPacketStatus
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetCrcSeed
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetCrcPolynomial
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetRxBufferStatus
</UL>

<P><STRONG><a name="[8e]"></a>SX126xGetPayload</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, sx126x.o(i.SX126xGetPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SX126xGetPayload &rArr; SX126xGetRxBufferStatus &rArr; SX126xReadRegister &rArr; SX126xReadRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadBuffer
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetRxBufferStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioIrqProcess
</UL>

<P><STRONG><a name="[92]"></a>SX126xGetRssiInst</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sx126x.o(i.SX126xGetRssiInst))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX126xGetRssiInst &rArr; SX126xReadCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRssi
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRandom
</UL>

<P><STRONG><a name="[b8]"></a>SX126xGetRxBufferStatus</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sx126x.o(i.SX126xGetRxBufferStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX126xGetRxBufferStatus &rArr; SX126xReadRegister &rArr; SX126xReadRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadRegister
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPacketType
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPayload
</UL>

<P><STRONG><a name="[85]"></a>SX126xInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sx126x.o(i.SX126xInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX126xInit &rArr; SX126xSetStandby &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetStandby
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWakeup
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReset
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetDio2AsRfSwitchCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[b9]"></a>SX126xReadBuffer</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, sx126x-board.o(i.SX126xReadBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SX126xReadBuffer &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWaitOnBusy
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCheckDeviceReady
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPayload
</UL>

<P><STRONG><a name="[b6]"></a>SX126xReadCommand</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, sx126x-board.o(i.SX126xReadCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SX126xReadCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWaitOnBusy
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCheckDeviceReady
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetRssiInst
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPacketStatus
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetIrqStatus
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetRxBufferStatus
</UL>

<P><STRONG><a name="[93]"></a>SX126xReadRegister</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx126x-board.o(i.SX126xReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX126xReadRegister &rArr; SX126xReadRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetWhiteningSeed
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRead
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetRxBufferStatus
</UL>

<P><STRONG><a name="[94]"></a>SX126xReadRegisters</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, sx126x-board.o(i.SX126xReadRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SX126xReadRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWaitOnBusy
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCheckDeviceReady
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadRegister
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioReadBuffer
</UL>

<P><STRONG><a name="[ba]"></a>SX126xReset</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sx126x-board.o(i.SX126xReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX126xReset
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay_nMS
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xInit
</UL>

<P><STRONG><a name="[98]"></a>SX126xSendPayload</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSendPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX126xSendPayload &rArr; SX126xSetTx &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetTx
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPayload
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
</UL>

<P><STRONG><a name="[88]"></a>SX126xSetBufferBaseAddress</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetBufferBaseAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX126xSetBufferBaseAddress &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[a7]"></a>SX126xSetCad</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetCad))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX126xSetCad &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStartCad
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_cad
</UL>

<P><STRONG><a name="[bf]"></a>SX126xSetCadParams</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, sx126x.o(i.SX126xSetCadParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX126xSetCadParams &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_cad
</UL>

<P><STRONG><a name="[c0]"></a>SX126xSetCrcPolynomial</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetCrcPolynomial))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX126xSetCrcPolynomial &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegisters
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPacketType
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketParams
</UL>

<P><STRONG><a name="[c1]"></a>SX126xSetCrcSeed</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetCrcSeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX126xSetCrcSeed &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegisters
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPacketType
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketParams
</UL>

<P><STRONG><a name="[bb]"></a>SX126xSetDio2AsRfSwitchCtrl</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetDio2AsRfSwitchCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX126xSetDio2AsRfSwitchCtrl &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xInit
</UL>

<P><STRONG><a name="[8a]"></a>SX126xSetDioIrqParams</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, sx126x.o(i.SX126xSetDioIrqParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SX126xSetDioIrqParams &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBoosted
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_cad
</UL>

<P><STRONG><a name="[9d]"></a>SX126xSetLoRaSymbNumTimeout</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetLoRaSymbNumTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX126xSetLoRaSymbNumTimeout &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[9f]"></a>SX126xSetModulationParams</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, sx126x.o(i.SX126xSetModulationParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SX126xSetModulationParams &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketType
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[c2]"></a>SX126xSetPaConfig</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sx126x.o(i.SX126xSetPaConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX126xSetPaConfig &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetTxParams
</UL>

<P><STRONG><a name="[97]"></a>SX126xSetPacketParams</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, sx126x.o(i.SX126xSetPacketParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SX126xSetPacketParams &rArr; SX126xSetPacketType &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketType
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetCrcSeed
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetCrcPolynomial
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetMaxPayloadLength
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSend
</UL>

<P><STRONG><a name="[9a]"></a>SX126xSetPacketType</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetPacketType))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX126xSetPacketType &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketParams
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetModulationParams
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetModem
</UL>

<P><STRONG><a name="[bd]"></a>SX126xSetPayload</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetPayload))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX126xSetPayload &rArr; SX126xWriteBuffer &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteBuffer
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSendPayload
</UL>

<P><STRONG><a name="[87]"></a>SX126xSetRegulatorMode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetRegulatorMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX126xSetRegulatorMode &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[99]"></a>SX126xSetRfFrequency</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, sx126x.o(i.SX126xSetRfFrequency))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SX126xSetRfFrequency &rArr; __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCalibrateImage
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetChannel
</UL>

<P><STRONG><a name="[a4]"></a>SX126xSetRfTxPower</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sx126x-board.o(i.SX126xSetRfTxPower))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SX126xSetRfTxPower &rArr; SX126xSetTxParams &rArr; SX126xWriteRegister &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetTxParams
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
</UL>

<P><STRONG><a name="[91]"></a>SX126xSetRx</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetRx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX126xSetRx &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRx
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRandom
</UL>

<P><STRONG><a name="[95]"></a>SX126xSetRxBoosted</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sx126x.o(i.SX126xSetRxBoosted))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SX126xSetRxBoosted &rArr; SX126xWriteRegister &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegister
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioRxBoosted
</UL>

<P><STRONG><a name="[a3]"></a>SX126xSetRxDutyCycle</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, sx126x.o(i.SX126xSetRxDutyCycle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX126xSetRxDutyCycle &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxDutyCycle
</UL>

<P><STRONG><a name="[a6]"></a>SX126xSetSleep</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX126xSetSleep &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xAntSwOff
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSleep
</UL>

<P><STRONG><a name="[86]"></a>SX126xSetStandby</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetStandby))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX126xSetStandby &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xInit
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioStandby
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[9c]"></a>SX126xSetStopRxTimerOnPreambleDetect</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetStopRxTimerOnPreambleDetect))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX126xSetStopRxTimerOnPreambleDetect &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[a0]"></a>SX126xSetSyncWord</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetSyncWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX126xSetSyncWord &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[be]"></a>SX126xSetTx</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX126xSetTx &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSendPayload
</UL>

<P><STRONG><a name="[a5]"></a>SX126xSetTxContinuousWave</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sx126x.o(i.SX126xSetTxContinuousWave))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SX126xSetTxContinuousWave &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxContinuousWave
</UL>

<P><STRONG><a name="[89]"></a>SX126xSetTxParams</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, sx126x.o(i.SX126xSetTxParams))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SX126xSetTxParams &rArr; SX126xWriteRegister &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegister
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPaSelect
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPaConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfTxPower
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioInit
</UL>

<P><STRONG><a name="[a1]"></a>SX126xSetWhiteningSeed</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, sx126x.o(i.SX126xSetWhiteningSeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SX126xSetWhiteningSeed &rArr; SX126xWriteRegister &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegister
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadRegister
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xGetPacketType
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[b5]"></a>SX126xWaitOnBusy</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sx126x-board.o(i.SX126xWaitOnBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SX126xWaitOnBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegisters
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteBuffer
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadRegisters
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadBuffer
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWakeup
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadCommand
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCheckDeviceReady
</UL>

<P><STRONG><a name="[b3]"></a>SX126xWakeup</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sx126x-board.o(i.SX126xWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWaitOnBusy
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xInit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCheckDeviceReady
</UL>

<P><STRONG><a name="[c3]"></a>SX126xWriteBuffer</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, sx126x-board.o(i.SX126xWriteBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SX126xWriteBuffer &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWaitOnBusy
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCheckDeviceReady
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPayload
</UL>

<P><STRONG><a name="[b1]"></a>SX126xWriteCommand</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, sx126x-board.o(i.SX126xWriteCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWaitOnBusy
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCheckDeviceReady
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetTxParams
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetTxContinuousWave
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetTx
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetStopRxTimerOnPreambleDetect
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetStandby
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetSleep
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRxDutyCycle
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRxBoosted
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRx
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRfFrequency
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRegulatorMode
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketType
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPacketParams
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetModulationParams
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetLoRaSymbNumTimeout
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetDioIrqParams
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetCad
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetBufferBaseAddress
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xClearIrqStatus
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetPaConfig
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetDio2AsRfSwitchCtrl
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetCadParams
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCalibrateImage
</UL>

<P><STRONG><a name="[9b]"></a>SX126xWriteRegister</STRONG> (Thumb, 12 bytes, Stack size 16 bytes, sx126x-board.o(i.SX126xWriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SX126xWriteRegister &rArr; SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegisters
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetWhiteningSeed
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetTxParams
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetRxBoosted
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioWrite
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetPublicNetwork
</UL>

<P><STRONG><a name="[ac]"></a>SX126xWriteRegisters</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, sx126x-board.o(i.SX126xWriteRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SX126xWriteRegisters &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpiInOut
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWaitOnBusy
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xCheckDeviceReady
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegister
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetSyncWord
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioWriteBuffer
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetCrcSeed
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetCrcPolynomial
</UL>

<P><STRONG><a name="[bc]"></a>SpiInOut</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, spi.o(i.SpiInOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData8
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveData8
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteRegisters
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteBuffer
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadRegisters
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadBuffer
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWriteCommand
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xWakeup
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xReadCommand
</UL>

<P><STRONG><a name="[62]"></a>SysClock_48</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i.SysClock_48))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysClock_48 &rArr; RCC_PLLConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_SYSCLKConfig
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLConfig
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLLCmd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_int
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SystemInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, system_stm32f0xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(.text)
</UL>
<P><STRONG><a name="[14]"></a>TIM14_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.TIM14_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.TIM3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>Tick_Configration</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(i.Tick_Configration))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Tick_Configration &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_int
</UL>

<P><STRONG><a name="[1c]"></a>USART1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f0xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART1_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030.o(RESET)
</UL>
<P><STRONG><a name="[d2]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[cf]"></a>USART_GetITStatus</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f0xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[d3]"></a>USART_ITConfig</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f0xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[d1]"></a>USART_Init</STRONG> (Thumb, 156 bytes, Stack size 56 bytes, stm32f0xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UartInit
</UL>

<P><STRONG><a name="[d0]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[63]"></a>UartInit</STRONG> (Thumb, 138 bytes, Stack size 64 bytes, uart.o(i.UartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = UartInit &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_int
</UL>

<P><STRONG><a name="[d6]"></a>__0printf$8</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[115]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[68]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_sec
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_set_min
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_int
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_sn
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_rtc_time
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sleep_fsm_func
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_data
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_recv_end_fsm_func
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_idie_fsm_func
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_cad
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cad_busy_fsm_func
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTxDone
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnRxTimeout
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnRxError
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnRxDone
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnCadDone
</UL>

<P><STRONG><a name="[57]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[116]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[117]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[118]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[a9]"></a>ceil</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, ceil.o(i.ceil))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ceil &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
</UL>

<P><STRONG><a name="[ab]"></a>floor</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, floor.o(i.floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
</UL>

<P><STRONG><a name="[22]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart.o(i.fputc))
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[d4]"></a>lora_change_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lora_node.o(i.lora_change_state))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_fsm_func
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_end_fsm_func
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_recv_fsm_func
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_recv_end_fsm_func
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_idie_fsm_func
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cad_idie_fsm_func
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cad_check_fsm_func
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cad_busy_fsm_func
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_again_fsm_func
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTxTimeout
<LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnTxDone
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnRxTimeout
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnRxError
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnRxDone
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_OnCadDone
</UL>

<P><STRONG><a name="[f5]"></a>lora_common_crc</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lora_common.o(i.lora_common_crc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lora_common_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_common_snd_end
</UL>

<P><STRONG><a name="[d9]"></a>lora_common_delay_s</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lora_common.o(i.lora_common_delay_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lora_common_delay_s &rArr; rtc_get_sec &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_sec
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_again_fsm_func
</UL>

<P><STRONG><a name="[eb]"></a>lora_common_get_data</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lora_common.o(i.lora_common_get_data))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_data
</UL>

<P><STRONG><a name="[e8]"></a>lora_common_snd_beg</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lora_common.o(i.lora_common_snd_beg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lora_common_snd_beg
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_data
</UL>

<P><STRONG><a name="[ea]"></a>lora_common_snd_end</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lora_common.o(i.lora_common_snd_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lora_common_snd_end &rArr; lora_common_crc
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_common_crc
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_data
</UL>

<P><STRONG><a name="[e9]"></a>lora_common_snd_join</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lora_common.o(i.lora_common_snd_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lora_common_snd_join
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_data
</UL>

<P><STRONG><a name="[ef]"></a>lora_node_base_info</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lora_node.o(i.lora_node_base_info))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_addr
</UL>

<P><STRONG><a name="[fb]"></a>lora_node_init</STRONG> (Thumb, 132 bytes, Stack size 64 bytes, lora_node.o(i.lora_node_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lora_node_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>lora_node_task</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, lora_node.o(i.lora_node_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lora_node_task &rArr; _sleep_fsm_func &rArr; RTC_Alarm_set_min &rArr; rtc_get_sec &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sleep_fsm_func
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sending_fsm_func
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_overtime_fsm_func
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_fsm_func
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_end_fsm_func
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_recving_fsm_func
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_recv_overtime_fsm_func
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_recv_fsm_func
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_recv_end_fsm_func
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_idie_fsm_func
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cad_idie_fsm_func
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cad_check_fsm_func
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cad_busy_fsm_func
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_again_fsm_func
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1e]"></a>main</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = main &rArr; HW_int &rArr; UartInit &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_node_task
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_node_init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_int
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_sn
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_addr
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_rtc_time
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[f0]"></a>operate_flash_read</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, operate_flash.o(i.operate_flash_read))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_sn
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_addr
</UL>

<P><STRONG><a name="[f4]"></a>operate_flash_write</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, operate_flash.o(i.operate_flash_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = operate_flash_write &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramHalfWord
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Lock
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write_sn
</UL>

<P><STRONG><a name="[a8]"></a>rint</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rint.o(i.rint))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rint &rArr; _drnd &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioTimeOnAir
</UL>

<P><STRONG><a name="[e1]"></a>rtc_get_min</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtc.o(i.rtc_get_min))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc_get_min &rArr; RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_idie_fsm_func
</UL>

<P><STRONG><a name="[79]"></a>rtc_get_sec</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rtc.o(i.rtc_get_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rtc_get_sec &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_set_min
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_idie_fsm_func
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_common_delay_s
</UL>

<P><STRONG><a name="[df]"></a>rtc_get_time</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtc.o(i.rtc_get_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rtc_get_time &rArr; RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_rtc_time
</UL>

<P><STRONG><a name="[69]"></a>rtc_set</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, rtc.o(i.rtc_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = rtc_set &rArr; RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSICmd
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_DateStructInit
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HW_int
</UL>

<P><STRONG><a name="[e5]"></a>rtc_set_time</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, rtc.o(i.rtc_set_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = rtc_set_time &rArr; RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_recv_end_fsm_func
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ce]"></a>SetSysClock</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, system_stm32f0xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[7c]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
</UL>

<P><STRONG><a name="[80]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetAlarm
</UL>

<P><STRONG><a name="[de]"></a>_get_rtc_time</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i._get_rtc_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _get_rtc_time &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_time
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ee]"></a>_set_addr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i._set_addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _set_addr
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operate_flash_read
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_node_base_info
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f3]"></a>_write_sn</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, main.o(i._write_sn))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _write_sn &rArr; operate_flash_write &rArr; FLASH_ProgramHalfWord &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operate_flash_write
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operate_flash_read
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>RadioGetFskBandwidthRegValue</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, radio.o(i.RadioGetFskBandwidthRegValue))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetTxConfig
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RadioSetRxConfig
</UL>

<P><STRONG><a name="[28]"></a>_OnCadDone</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lora_node.o(i._OnCadDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _OnCadDone &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_change_state
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_node.o(i.lora_node_init)
</UL>
<P><STRONG><a name="[24]"></a>_OnRxDone</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lora_node.o(i._OnRxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _OnRxDone &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_change_state
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_node.o(i.lora_node_init)
</UL>
<P><STRONG><a name="[27]"></a>_OnRxError</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lora_node.o(i._OnRxError))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _OnRxError &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_change_state
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_node.o(i.lora_node_init)
</UL>
<P><STRONG><a name="[26]"></a>_OnRxTimeout</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lora_node.o(i._OnRxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _OnRxTimeout &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_change_state
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_node.o(i.lora_node_init)
</UL>
<P><STRONG><a name="[23]"></a>_OnTxDone</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lora_node.o(i._OnTxDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _OnTxDone &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_change_state
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_node.o(i.lora_node_init)
</UL>
<P><STRONG><a name="[25]"></a>_OnTxTimeout</STRONG> (Thumb, 10 bytes, Stack size 4 bytes, lora_node.o(i._OnTxTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _OnTxTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_change_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lora_node.o(i.lora_node_init)
</UL>
<P><STRONG><a name="[d8]"></a>_again_fsm_func</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lora_node.o(i._again_fsm_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _again_fsm_func &rArr; lora_common_delay_s &rArr; rtc_get_sec &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_change_state
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_common_delay_s
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_node_task
</UL>

<P><STRONG><a name="[da]"></a>_cad_busy_fsm_func</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lora_node.o(i._cad_busy_fsm_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _cad_busy_fsm_func &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_change_state
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_node_task
</UL>

<P><STRONG><a name="[db]"></a>_cad_check_fsm_func</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lora_node.o(i._cad_check_fsm_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _cad_check_fsm_func &rArr; _check_cad &rArr; SX126xSetDioIrqParams &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_change_state
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_check_cad
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_node_task
</UL>

<P><STRONG><a name="[dd]"></a>_cad_idie_fsm_func</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, lora_node.o(i._cad_idie_fsm_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _cad_idie_fsm_func
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_change_state
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_node_task
</UL>

<P><STRONG><a name="[dc]"></a>_check_cad</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lora_node.o(i._check_cad))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _check_cad &rArr; SX126xSetDioIrqParams &rArr; SX126xWriteCommand &rArr; SX126xCheckDeviceReady &rArr; SX126xWakeup &rArr; SpiInOut
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetDioIrqParams
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetCad
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SX126xSetCadParams
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_cad_check_fsm_func
</UL>

<P><STRONG><a name="[e0]"></a>_idie_fsm_func</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lora_node.o(i._idie_fsm_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _idie_fsm_func &rArr; rtc_get_sec &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_sec
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_get_min
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_change_state
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_node_task
</UL>

<P><STRONG><a name="[e4]"></a>_recv_end_fsm_func</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, lora_node.o(i._recv_end_fsm_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = _recv_end_fsm_func &rArr; rtc_set_time &rArr; RTC_SetTime &rArr; RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_set_time
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_change_state
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_node_task
</UL>

<P><STRONG><a name="[e6]"></a>_recv_fsm_func</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lora_node.o(i._recv_fsm_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _recv_fsm_func
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_change_state
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_node_task
</UL>

<P><STRONG><a name="[fa]"></a>_recv_overtime_fsm_func</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lora_node.o(i._recv_overtime_fsm_func))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_node_task
</UL>

<P><STRONG><a name="[f9]"></a>_recving_fsm_func</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lora_node.o(i._recving_fsm_func))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_node_task
</UL>

<P><STRONG><a name="[e7]"></a>_send_data</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lora_node.o(i._send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _send_data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_common_snd_join
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_common_snd_end
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_common_snd_beg
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_common_get_data
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_fsm_func
</UL>

<P><STRONG><a name="[ec]"></a>_send_end_fsm_func</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, lora_node.o(i._send_end_fsm_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _send_end_fsm_func
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_change_state
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_node_task
</UL>

<P><STRONG><a name="[ed]"></a>_send_fsm_func</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lora_node.o(i._send_fsm_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _send_fsm_func &rArr; _send_data &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_change_state
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_send_data
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_node_task
</UL>

<P><STRONG><a name="[f8]"></a>_send_overtime_fsm_func</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lora_node.o(i._send_overtime_fsm_func))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_node_task
</UL>

<P><STRONG><a name="[f7]"></a>_sending_fsm_func</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lora_node.o(i._sending_fsm_func))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_node_task
</UL>

<P><STRONG><a name="[f1]"></a>_sleep_fsm_func</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lora_node.o(i._sleep_fsm_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _sleep_fsm_func &rArr; RTC_Alarm_set_min &rArr; rtc_get_sec &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_EnterSTANDBYMode
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Alarm_set_min
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lora_node_task
</UL>

<P><STRONG><a name="[d7]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[e3]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e2]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
